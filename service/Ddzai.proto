syntax = "proto3";

package DDZ;

service AI
{
    rpc OnQueryNextPlay (QueryNextPlayReq) returns (QueryNextPlayAck) {}
    rpc OnEvaluateReq (EvaluateReq) returns (EvaluateAck) {}
    rpc OnEvaluatePatternSequenceReq (EvaluatePatternSequenceReq) returns (EvaluatePatternSequenceAck) {}
}


message CardArray
{
    repeated int32 cards = 1;               //牌数组
}

message PlayerData
{
    string position = 1;                    //座位(landlord|landlord_up|landlord_down)
    repeated int32 hand_cards = 2;          //当前手牌
    repeated int32 played_cards = 3;        //已出过的牌 [a,b,c,d,e]
}

message QueryNextPlayReq
{
    string my_position = 1;                     //当前出牌座位(landlord|landlord_up|landlord_down)
    repeated PlayerData player_datas = 2;       //每个玩家的出牌情况
    repeated int32 three_landlord_cards = 3;    //剩余3张地主附加牌（移除已打出的）
    repeated CardArray card_play_action_seq = 4;//已出牌序列数组
    int32 bomb_num = 5;                         //当前炸弹数量
}
message QueryNextPlayAck
{
    int32 errcode = 1;                          //0成功
    repeated int32 result = 2;                  //出牌结果
}

message EvaluateResult
{
    int32 win_type = 1;                         //1地主胜 2农民胜
    int32 boom_count = 2;                       //炸弹数量
    int32 landlord_left_count = 3;              //地主剩余牌数
    int32 landlord_up_left_count = 4;           //地主上家剩余牌数
    int32 landlord_down_left_count = 5;         //地主下家剩余牌数
}
message EvaluateReq
{
    repeated int32 pos1_cards = 1;              //1号牌
    repeated int32 pos2_cards = 2;              //2号牌
    repeated int32 pos3_cards = 3;              //3号牌
    repeated int32 three_landlord_cards = 4;    //剩余三张牌
}
message EvaluateAck
{
    int32 errcode = 1;                          //0成功
    repeated EvaluateResult results = 2;        //轮流当地主的评估结果:123-132-231-213-312-321
}

message PatternSequence
{
    repeated int32 cards = 1;                   //出牌
}
message EvaluatePatternSequenceReq
{
    repeated int32 pos1_cards = 1;              //1号牌
    repeated int32 pos2_cards = 2;              //2号牌
    repeated int32 pos3_cards = 3;              //3号牌
}
message EvaluatePatternSequenceAck
{
    int32 errcode = 1;                          //0成功
    repeated PatternSequence sequence = 2;      //出牌序列
}
